from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from init import bot, redis
from parsers.workUAparser import WorkUaParser
from DataProcessor import DataProcessor, format_salary, format_skills
import keyboards
import asyncio
import json
from hashlib import sha256

router = Router()


async def parser_task(chat_id: int, exchange: str, specialization: str, experience: str,
                      location: str, skills: str, salary: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–ø 5 —Ä–µ–∑—é–º–µ  –≤ –±–æ—Ç—ñ —Ç–∞ –ª—ñ–Ω–∫ –Ω–∞ —ñ–Ω—à—ñ
     –î–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è —É –Ω–æ–≤–æ–º—É —Ç—Ä–µ–¥—ñ, –æ—Ç–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª –Ω–µ –±—É–¥–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
     –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—é –∫–µ—à—É–≤–∞–Ω–Ω—è
     —Ç–æ–ø 5 –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –≤–∏–≤–æ–¥–∏–º –≤ –±–æ—Ç—ñ, –±–∞–≥–∞—Ç–æ –≤ –±–æ—Ç—ñ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ –∑—Ä—É—á–Ω–æ!
     —ñ–Ω—à–∏—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞ –∑—Å–∏–ª–∫–æ—é
     """

    cache_key = sha256(
        f"{exchange}:{specialization}:{experience}:{location}:{skills}:{salary}".encode()).hexdigest()

    cached_data = await redis.get(cache_key)

    if cached_data:
        resumes = json.loads(cached_data)
    else:
        # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä
        if exchange == "workua":
            parser = WorkUaParser(position=specialization, experience=experience)
            resumes = parser.getResumes()  # –ø–∞—Ä—Å–∏–º–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            processor = DataProcessor(resumes)
            filtered_data = processor.apply_filters(city_name=location, max_salary=salary)  # —Ñ—ñ–ª—å—Ç—É—î–º–æ
            processedResumes = processor.pointsDetermination(skills=skills,
                                                             filtered_data=filtered_data)  # –≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ –±–∞–ª–∏
            processedResumes = processedResumes[:20]  # –≤—ñ–¥–±–∏—Ä–∞—î–º–æ —Ç–æ–ø 20 (–≥–∞–¥–∞—é —Ü—å–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ)
            await redis.setex(cache_key, 60 * 60, json.dumps(processedResumes))

    await bot.send_message(chat_id, "–û—Å—å –¢–û–ü 5 üèÜ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ –¥–∞–Ω—É –ø–æ—Å–∞–¥—É!")
    for resume in processedResumes[:5]:  # –≤–∏–≤–æ–¥–∏–º–æ —Ç–æ–ø 5 —ñ–Ω—à—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —Ü–µ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—ñ
        keyboard = keyboards.build_keyboard(resume.get('linkURL'))
        formatted_skills = format_skills(resume.get('skills', []))
        formatted_salary = format_salary(resume.get('salary'))
        await bot.send_message(
            chat_id,
            f"<b>{resume.get('name')}</b> {resume.get('–í—ñ–∫:', '')} {resume.get('–ú—ñ—Å—Ç–æ:', '')} <b>–ë–∞–ª—ñ–≤: </b>{resume.get('points', '')}\n"
            f"<b>{resume.get('position')}</b> \n"
            f"<b>–ù–∞–≤–∏—á–∫–∏</b>: {formatted_skills}\n"
            f"<b>–û—á—ñ–∫—É–≤–∞–Ω–∞ –∑–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞:</b> {formatted_salary}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await bot.send_message(chat_id,
                           f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—ñ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://zelse.asuscomm.com:5000?cache_key={cache_key}\n"
                           f"–£—Å–ø—ñ—Ö—ñ–≤ —É –ø–æ—à—É–∫—É –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ üßë‚Äçüíª!",
                           parse_mode="HTML", disable_web_page_preview=True)


# ----------------------------–±–æ—Ç-------------------------------------------------
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer("–í—ñ—Ç–∞—é‚úã! –Ø HR –ø–æ–º—ñ—á–Ω–∏–∫üë©‚Äçüíº! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ üîç –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
    await message.answer("O–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—É –ø—Ä–∞—Ü—ñ üëá", reply_markup=keyboards.start_Keyboard.as_markup())
    await state.set_state(States.waiting_for_exchange)


# -------------------–º–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤--------------------------------------------------
class States(StatesGroup):
    waiting_for_exchange = State()
    waiting_for_specialization = State()
    waiting_for_experience = State()
    waiting_for_location = State()
    waiting_for_skills = State()
    waiting_for_salary = State()
    go = State()


@router.callback_query(States.waiting_for_exchange)
async def exchange(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != 'workua':
        await callback.message.answer(f"–î–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
    else:
        await state.update_data(exchange=callback.data)
        await callback.message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å üñä —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: GO –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç")
        await state.set_state(States.waiting_for_specialization)


@router.message(States.waiting_for_specialization)
async def specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É üëá", reply_markup=keyboards.experience.as_markup())
    await state.set_state(States.waiting_for_location)


@router.callback_query(States.waiting_for_location)
async def location(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(experience=callback.data)
    await callback.message.answer(
        f"–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –æ—Ñ—ñ—Å—ñ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å '–í—Å—è –£–∫—Ä–∞—ó–Ω–∞' –¥–ª—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.",
        reply_markup=keyboards.location_keyboard)
    await state.set_state(States.waiting_for_skills)


@router.message(States.waiting_for_skills)
async def skills(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: git, docker,...",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(States.waiting_for_salary)


@router.message(States.waiting_for_salary)
async def salary(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É üíµ —É –≥—Ä–Ω. –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 100000",
                         reply_markup=keyboards.salary_keyboard)
    await state.set_state(States.go)


@router.message(States.go)
async def go(message: types.Message, state: FSMContext):
    await state.update_data(salary=message.text)
    data = await state.get_data()
    exchange = data.get("exchange")
    specialization = data.get("specialization")
    experience = data.get("experience")
    location = data.get("location")
    skills = data.get("skills")
    salary = data.get("salary")


    await message.answer(
        f"<b>–ó–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø–æ—à—É–∫ üîç –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:</b>\n"
        f"<b>–ë—ñ—Ä–∂–∞:</b> {exchange}\n"
        f"<b>–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:</b> {specialization}\n"
        f"<b>–î–æ—Å–≤—ñ–¥:</b> {experience}\n"
        f"<b>–õ–æ–∫–∞—Ü—ñ—è:</b> {location}\n"
        f"<b>–ù–∞–≤–∏—á–∫–∏:</b> {skills}\n"
        f"<b>–ó–ü:</b> {salary}",
        parse_mode='HTML')
    await message.answer("–û—á—ñ–∫—É–π—Ç–µ! ‚è≥", reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –≤–∏–∫–ª–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞ —É —Ñ–æ–Ω—ñ
    asyncio.create_task(parser_task(chat_id=message.chat.id,
                                    exchange=exchange,
                                    specialization=specialization,
                                    experience=experience,
                                    location=location,
                                    skills=skills,
                                    salary=salary))


@router.message(F.text.lower() == "/help")
async def answer_yes(message: Message):
    await message.answer("–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞ ...", )#–º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –Ω—ñ–∫ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
