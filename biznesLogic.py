from aiogram import Router, F, types
from aiogram.types import Message,ReplyKeyboardRemove
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from init import bot
from parsers.workUAparser import WorkUaParser
from DataProcessor import DataProcessor
import keyboards
import asyncio

router = Router()


class AsyncFileHandler(logging.FileHandler):  # –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    def emit(self, record):
        loop = asyncio.get_event_loop()
        loop.run_in_executor(None, super().emit, record)


logger = logging.getLogger('async_logger')
logger.setLevel(logging.INFO)
handler = AsyncFileHandler('Logfile.txt')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞–≤–∏—á–æ–∫
def format_skills(skills: list[str]) -> str:
    if not skills:
        return "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    return " | ".join(skills)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç–∏
def format_salary(salary: str | None) -> str:
    return "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ" if salary is None else salary

async def parser_task(chat_id: int, exchange: str, specialization: str, experience: str,
                      location: str,skills:str, age: str, salary: str):

    if exchange == "workua":
        parser = WorkUaParser(position=specialization, experience=experience)
        resumes = parser.getResumes()

        # processor = DataProcessor(resumes)
        # filtered_data = processor.apply_filters(city_name=location, max_age=age)

        #sorted_data = processor.sort_by_price()

        for resume in resumes:
            keyboard = keyboards.build_keyboard(resume.get('linkURL'))
            formatted_skills = format_skills(resume.get('skills', []))
            formatted_salary = format_salary(resume.get('salary'))
            await bot.send_message(
                chat_id,
                f"<b>{resume.get('name')}</b> {resume.get('–í—ñ–∫:', '')}\n"
                f"<b>{resume.get('position')}</b> {resume.get('–ú—ñ—Å—Ç–æ:', '')}\n"
                f"<b>–ù–∞–≤–∏—á–∫–∏</b>: {formatted_skills}\n"
                f"<b>–û—á—ñ–∫—É–≤–∞–Ω–∞ –∑–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞:</b> {formatted_salary}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer("O–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—É üëá", reply_markup=keyboards.start_Keyboard.as_markup())
    await state.set_state(States.waiting_for_exchange)


class States(StatesGroup):
    waiting_for_exchange = State()
    waiting_for_specialization = State()
    waiting_for_experience = State()
    waiting_for_location = State()
    waiting_for_age = State()
    waiting_for_skills = State()
    waiting_for_salary = State()
    go = State()


@router.callback_query(States.waiting_for_exchange)
async def exchange(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != 'workua':
        await callback.message.answer(f"–î–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
    else:
        await state.update_data(exchange=callback.data)
        await callback.message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å üñä —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: GO –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç")
        await state.set_state(States.waiting_for_specialization)


@router.message(States.waiting_for_specialization)
async def specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å üëá", reply_markup=keyboards.experience.as_markup())
    await state.set_state(States.waiting_for_location)


@router.callback_query(States.waiting_for_location)
async def location(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(experience=callback.data)
    await callback.message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –º—ñ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –í—Å—è –£–∫—Ä–∞—ó–Ω–∞",
                                  reply_markup=keyboards.location_keyboard)
    await state.set_state(States.waiting_for_age)

@router.message(States.waiting_for_age)
async def age(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –≥—Ä–∞–Ω–∏—á–Ω–∏–π –≤—ñ–∫ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 35", reply_markup=keyboards.age_keyboard)
    await state.set_state(States.waiting_for_skills)


@router.message(States.waiting_for_skills)
async def skills(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: git, docker,...",
                                    reply_markup=ReplyKeyboardRemove())
    await state.set_state(States.waiting_for_salary)
@router.message(States.waiting_for_salary)
async def salary(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É üíµ —É –≥—Ä–Ω. –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 100000",
                         reply_markup=keyboards.salary_keyboard)
    await state.set_state(States.go)


@router.message(States.go)
async def go(message: types.Message, state: FSMContext):
    await state.update_data(salary=message.text)
    data = await state.get_data()
    exchange = data.get("exchange")
    specialization = data.get("specialization")
    experience = data.get("experience")
    location = data.get("location")
    skills = data.get("skills")
    age = data.get("age")
    salary = data.get("salary")
    await message.answer(
        f"<b>–ó–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø–æ—à—É–∫ üîç –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:</b>\n"
        f"<b>–ë—ñ—Ä–∂–∞:</b> {exchange}\n"
        f"<b>–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:</b> {specialization}\n"
        f"<b>–î–æ—Å–≤—ñ–¥:</b> {experience}\n"
        f"<b>–õ–æ–∫–∞—Ü—ñ—è:</b> {location}\n"
        f"<b>–ù–∞–≤–∏—á–∫–∏:</b> {skills}\n"
        f"<b>–í—ñ–∫:</b> {age}\n"
        f"<b>–ó–ü:</b> {salary}",
        parse_mode='HTML')
    await message.answer("–û—á—ñ–∫—É–π—Ç–µ! ‚è≥",  reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –≤–∏–∫–ª–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞ —É —Ñ–æ–Ω—ñ
    asyncio.create_task(parser_task(chat_id=message.chat.id,
                                    exchange=exchange,
                                    specialization=specialization,
                                    experience=experience,
                                    location=location,
                                    skills=skills,
                                    age=age, salary=salary))


@router.message(F.text.lower() == "/help")
async def answer_yes(message: Message):
    await message.answer("–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞ ...", )
